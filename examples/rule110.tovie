dec board:int[32]
def<COUNT 16>

def<print_arr 2>
proc_2
	dec tmp:int
	0 >tmp
	32 for
		<board[tmp]
		if dup 1 == do
			"#" puts
		end_if
		if 0 == do
			"-" puts
		end_if
		<tmp 1 + >tmp
	for_end
proc_end

def<load_arr 3>
proc_3
	0 >board[0]
	0 >board[1]
	0 >board[2]
	0 >board[3]
	0 >board[4]
	1 >board[5]
	0 >board[6]
	1 >board[7]
	0 >board[8]
	0 >board[9]
	0 >board[10]
	0 >board[11]
	0 >board[12]
	0 >board[13]
	0 >board[14]
	0 >board[15]
	0 >board[16]
	0 >board[17]
	0 >board[18]
	0 >board[19]
	0 >board[20]
	1 >board[21]
	0 >board[22]
	1 >board[23]
	0 >board[24]
	0 >board[25]
	0 >board[26]
	0 >board[27]
	0 >board[28]
	0 >board[29]
	0 >board[30]
	0 >board[31]
proc_end

def<cycle_core 5>
proc_5
	dec t1:int
	dec t2:int
	dec t3:int
	>t3 >t2 >t1
	if <t1 0 == <t2 0 == && <t3 0 == && do
		0 ret
	end_if
	if <t1 0 == <t2 0 == && <t3 1 == && do
		1 ret
	end_if
	if <t1 0 == <t2 1 == && <t3 0 == && do
		1 ret
	end_if
	if <t1 0 == <t2 1 == && <t3 1 == && do
		1 ret
	end_if
	if <t1 1 == <t2 0 == && <t3 0 == && do
		0 ret
	end_if
	if <t1 1 == <t2 0 == && <t3 1 == && do
		1 ret
	end_if
	if <t1 1 == <t2 1 == && <t3 0 == && do
		1 ret
	end_if
	if <t1 1 == <t2 1 == && <t3 1 == && do
		0 ret
	end_if
proc_end


def<do_cycle 4>
proc_4
	dec b0:int
	dec b1:int
	dec tmp2:int
	dec tmp3:int
	dec tmp4:int
	dec tmp5:int
	dec tmp:int
	<board[0] >b0
	<board[1] >b1
	0 >tmp
	32 for
		<board[tmp]
		if <tmp 30 < do
			<board[tmp]
			<tmp 1 + >tmp2
			<board[tmp2]
			<tmp 2 + >tmp2
			<board[tmp2]
			>tmp5
			>tmp4
			>tmp3
		end_if
		if <tmp 30 == do
			<b0 >tmp5
			<tmp 1 + >tmp2
			<board[tmp2] >tmp4
			<board[tmp] >tmp3
		end_if
		if <tmp 31 == do
			<b0 >tmp5
			<b1 >tmp4
			<board[tmp] >tmp3
		end_if
		<tmp3 <tmp4 <tmp5 cycle_core call
		>board[tmp]
		<tmp 1 + >tmp
	for_end
proc_end

proc_main
	load_arr call
	COUNT for
		print_arr call
		" " putsln
		do_cycle call
	for_end
proc_end